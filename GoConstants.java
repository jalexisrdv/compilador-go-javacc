/* Generated By:JavaCC: Do not edit this line. GoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int integer_literal = 8;
  /** RegularExpression Id. */
  int floating_literal = 9;
  /** RegularExpression Id. */
  int boolean_literal = 10;
  /** RegularExpression Id. */
  int string_literal = 11;
  /** RegularExpression Id. */
  int numbers = 12;
  /** RegularExpression Id. */
  int valid_characters = 13;
  /** RegularExpression Id. */
  int double_quotes_in_string = 14;
  /** RegularExpression Id. */
  int back_slash = 15;
  /** RegularExpression Id. */
  int tabulations = 16;
  /** RegularExpression Id. */
  int addition = 17;
  /** RegularExpression Id. */
  int subtraction = 18;
  /** RegularExpression Id. */
  int multiplication = 19;
  /** RegularExpression Id. */
  int division = 20;
  /** RegularExpression Id. */
  int remainder = 21;
  /** RegularExpression Id. */
  int increment = 22;
  /** RegularExpression Id. */
  int decrement = 23;
  /** RegularExpression Id. */
  int equal = 24;
  /** RegularExpression Id. */
  int not_equal = 25;
  /** RegularExpression Id. */
  int greater_than = 26;
  /** RegularExpression Id. */
  int less_than = 27;
  /** RegularExpression Id. */
  int greater_than_or_equal = 28;
  /** RegularExpression Id. */
  int less_than_or_equal = 29;
  /** RegularExpression Id. */
  int bitwise_and = 30;
  /** RegularExpression Id. */
  int bitwise_inclusive_or = 31;
  /** RegularExpression Id. */
  int bitwise_exclusive_or = 32;
  /** RegularExpression Id. */
  int left_shift = 33;
  /** RegularExpression Id. */
  int right_shift = 34;
  /** RegularExpression Id. */
  int and = 35;
  /** RegularExpression Id. */
  int or = 36;
  /** RegularExpression Id. */
  int not = 37;
  /** RegularExpression Id. */
  int assignment = 38;
  /** RegularExpression Id. */
  int dynamic_assignment = 39;
  /** RegularExpression Id. */
  int addition_assignment = 40;
  /** RegularExpression Id. */
  int subtraction_assignment = 41;
  /** RegularExpression Id. */
  int multiplication_assignment = 42;
  /** RegularExpression Id. */
  int division_assignment = 43;
  /** RegularExpression Id. */
  int remainder_assignment = 44;
  /** RegularExpression Id. */
  int bitwise_and_assignment = 45;
  /** RegularExpression Id. */
  int bitwise_inclusive_or_assignment = 46;
  /** RegularExpression Id. */
  int bitwise_exclusive_or_assignment = 47;
  /** RegularExpression Id. */
  int left_shift_assignment = 48;
  /** RegularExpression Id. */
  int right_shift_assignment = 49;
  /** RegularExpression Id. */
  int opening_round_brackets = 50;
  /** RegularExpression Id. */
  int closing_round_brackets = 51;
  /** RegularExpression Id. */
  int opening_curly_brackets = 52;
  /** RegularExpression Id. */
  int closing_curly_brackets = 53;
  /** RegularExpression Id. */
  int opening_square_brackets = 54;
  /** RegularExpression Id. */
  int closing_square_brackets = 55;
  /** RegularExpression Id. */
  int semicolon = 56;
  /** RegularExpression Id. */
  int colon = 57;
  /** RegularExpression Id. */
  int dot = 58;
  /** RegularExpression Id. */
  int comma = 59;
  /** RegularExpression Id. */
  int double_quotes = 60;
  /** RegularExpression Id. */
  int quotes = 61;
  /** RegularExpression Id. */
  int rw_break = 62;
  /** RegularExpression Id. */
  int rw_default = 63;
  /** RegularExpression Id. */
  int rw_func = 64;
  /** RegularExpression Id. */
  int rw_interface = 65;
  /** RegularExpression Id. */
  int rw_select = 66;
  /** RegularExpression Id. */
  int rw_case = 67;
  /** RegularExpression Id. */
  int rw_defer = 68;
  /** RegularExpression Id. */
  int rw_go = 69;
  /** RegularExpression Id. */
  int rw_map = 70;
  /** RegularExpression Id. */
  int rw_struct = 71;
  /** RegularExpression Id. */
  int rw_chan = 72;
  /** RegularExpression Id. */
  int rw_else = 73;
  /** RegularExpression Id. */
  int rw_goto = 74;
  /** RegularExpression Id. */
  int rw_package = 75;
  /** RegularExpression Id. */
  int rw_switch = 76;
  /** RegularExpression Id. */
  int rw_const = 77;
  /** RegularExpression Id. */
  int rw_fallthrough = 78;
  /** RegularExpression Id. */
  int rw_if = 79;
  /** RegularExpression Id. */
  int rw_range = 80;
  /** RegularExpression Id. */
  int rw_type = 81;
  /** RegularExpression Id. */
  int rw_continue = 82;
  /** RegularExpression Id. */
  int rw_for = 83;
  /** RegularExpression Id. */
  int rw_import = 84;
  /** RegularExpression Id. */
  int rw_return = 85;
  /** RegularExpression Id. */
  int rw_var = 86;
  /** RegularExpression Id. */
  int dt_uint8 = 87;
  /** RegularExpression Id. */
  int dt_uint16 = 88;
  /** RegularExpression Id. */
  int dt_uint32 = 89;
  /** RegularExpression Id. */
  int dt_uint64 = 90;
  /** RegularExpression Id. */
  int dt_int8 = 91;
  /** RegularExpression Id. */
  int dt_int16 = 92;
  /** RegularExpression Id. */
  int dt_int32 = 93;
  /** RegularExpression Id. */
  int dt_int64 = 94;
  /** RegularExpression Id. */
  int dt_float32 = 95;
  /** RegularExpression Id. */
  int dt_float64 = 96;
  /** RegularExpression Id. */
  int dt_complex64 = 97;
  /** RegularExpression Id. */
  int dt_complex128 = 98;
  /** RegularExpression Id. */
  int dt_byte = 99;
  /** RegularExpression Id. */
  int dt_rune = 100;
  /** RegularExpression Id. */
  int dt_uint = 101;
  /** RegularExpression Id. */
  int dt_int = 102;
  /** RegularExpression Id. */
  int dt_uintptr = 103;
  /** RegularExpression Id. */
  int dt_string = 104;
  /** RegularExpression Id. */
  int dt_bool = 105;
  /** RegularExpression Id. */
  int main = 106;
  /** RegularExpression Id. */
  int library_fmt = 107;
  /** RegularExpression Id. */
  int rw_printf = 108;
  /** RegularExpression Id. */
  int rw_scanf = 109;
  /** RegularExpression Id. */
  int id = 110;
  /** RegularExpression Id. */
  int invalid_string = 111;
  /** RegularExpression Id. */
  int invalid_string_import = 112;
  /** RegularExpression Id. */
  int invalid_string_import_1 = 113;
  /** RegularExpression Id. */
  int invalid_string_import_2 = 114;
  /** RegularExpression Id. */
  int is_not_id = 115;
  /** RegularExpression Id. */
  int invalid_character = 116;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\r\\t\"",
    "\"\\n\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "<integer_literal>",
    "<floating_literal>",
    "<boolean_literal>",
    "<string_literal>",
    "<numbers>",
    "<valid_characters>",
    "\"\\\\\\\"\"",
    "\"\\\\\"",
    "<tabulations>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"<<\"",
    "\">>\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"=\"",
    "\":=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\",\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"break\"",
    "\"default\"",
    "\"func\"",
    "\"interface\"",
    "\"select\"",
    "\"case\"",
    "\"defer\"",
    "\"go\"",
    "\"map\"",
    "\"struct\"",
    "\"chan\"",
    "\"else\"",
    "\"goto\"",
    "\"package\"",
    "\"switch\"",
    "\"const\"",
    "\"fallthrough\"",
    "\"if\"",
    "\"range\"",
    "\"type\"",
    "\"continue\"",
    "\"for\"",
    "\"import\"",
    "\"return\"",
    "\"var\"",
    "\"uint8\"",
    "\"uint16\"",
    "\"uint32\"",
    "\"uint64\"",
    "\"int8\"",
    "\"int16\"",
    "\"int32\"",
    "\"int64\"",
    "\"float32\"",
    "\"float64\"",
    "\"complex64\"",
    "\"complex128\"",
    "\"byte\"",
    "\"rune\"",
    "\"uint\"",
    "\"int\"",
    "\"uintptr\"",
    "\"string\"",
    "\"bool\"",
    "\"main\"",
    "\"fmt\"",
    "\"Printf\"",
    "\"Scanf\"",
    "<id>",
    "<invalid_string>",
    "<invalid_string_import>",
    "<invalid_string_import_1>",
    "<invalid_string_import_2>",
    "<is_not_id>",
    "<invalid_character>",
  };

}
