/* GoTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GoTokenManager.java */
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings ("unused")
public class GoTokenManager implements GoConstants {
    //MOSTRAR PAR ORDENADO
    private static void showTidyPair(String type, StringBuilder value) {
        //System.out.println(type + ": " + value);
    }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 48;
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 110;
            return 4;
         }
         if ((active0 & 0xc0900100200000L) != 0L)
            return 12;
         if ((active1 & 0x80180084001L) != 0L)
         {
            jjmatchedKind = 110;
            return 8;
         }
         if ((active0 & 0x400000000000000L) != 0L)
            return 1;
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x37fe7ff5bffeL) != 0L)
         {
            jjmatchedKind = 110;
            return 49;
         }
         if ((active0 & 0x80000100000L) != 0L)
            return 16;
         return -1;
      case 1:
         if ((active1 & 0x8420L) != 0L)
            return 49;
         if ((active1 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x3fffffff3bdfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 49;
         }
         return -1;
      case 2:
         if ((active1 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 6;
         }
         if ((active1 & 0x84078480042L) != 0L)
            return 49;
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x37bf87b73f9dL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 49;
         }
         return -1;
      case 3:
         if ((active1 & 0x70000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 3;
            }
            return 50;
         }
         if ((active1 & 0x6b807820709L) != 0L)
            return 49;
         if ((active1 & 0x8000000L) != 0L)
            return 50;
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x310780357896L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 3;
            }
            return 49;
         }
         return -1;
      case 4:
         if ((active1 & 0x7000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
            return 50;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x200000012010L) != 0L)
            return 49;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x118780345886L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
            return 49;
         }
         if ((active1 & 0x70800000L) != 0L)
            return 50;
         return -1;
      case 5:
         if ((active1 & 0x110000301084L) != 0L)
            return 49;
         if ((active1 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 50;
         }
         if ((active1 & 0x7000000L) != 0L)
            return 50;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x8600044802L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 49;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x8000000800L) != 0L)
            return 49;
         if ((active1 & 0x600044002L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
            return 49;
         }
         if ((active1 & 0x180000000L) != 0L)
            return 50;
         return -1;
      case 7:
         if ((active1 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 7;
            return 50;
         }
         if ((active1 & 0x40000L) != 0L)
            return 49;
         if ((active1 & 0x4002L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 7;
            return 49;
         }
         return -1;
      case 8:
         if ((active1 & 0x2L) != 0L)
            return 49;
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 8;
            return 49;
         }
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 8;
            return 50;
         }
         if ((active1 & 0x200000000L) != 0L)
            return 50;
         return -1;
      case 9:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
            return 49;
         }
         if ((active1 & 0x400000000L) != 0L)
            return 50;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 33:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 34:
         return jjStartNfaWithStates_0(0, 60, 48);
      case 37:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 38:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x200800000000L, 0x0L);
      case 39:
         return jjStopAtPos(0, 61);
      case 40:
         return jjStopAtPos(0, 50);
      case 41:
         return jjStopAtPos(0, 51);
      case 42:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 43:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x10000400000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 59);
      case 45:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x20000800000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 58, 1);
      case 47:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 58:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 56);
      case 60:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x1000220000000L, 0x0L);
      case 61:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 62:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x2000410000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 91:
         return jjStartNfaWithStates_0(0, 54, 12);
      case 93:
         return jjStartNfaWithStates_0(0, 55, 12);
      case 94:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x20800000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600042108L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80180084001L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x420L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4078108002L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000040L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000210000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000001084L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa007800000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 123:
         return jjStopAtPos(0, 52);
      case 124:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x401000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 53);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 9:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 38:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 43:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 45:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 60:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 62:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000414848L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x200014L);
      case 102:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 49);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa007800000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180000200L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000100000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4078000002L);
      case 111:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x206000c2400L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000080L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000001L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800020000L);
      case 124:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 49);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000100L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x140000001000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4004L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xb007852001L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20180000000L);
      case 112:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x120000L);
      case 114:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 49);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x208L);
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x878200402L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L);
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L);
      case 56:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000000L, active1, 0x180000000L);
      case 99:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 49);
         break;
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 49);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 49);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 49);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 49);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x16L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 108:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 49);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300000000000L);
      case 111:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8007841000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200080L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 50:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 50);
         break;
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L);
      case 52:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 50);
         break;
      case 54:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 56:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1084L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 49);
         break;
      case 102:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 49);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 107:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 49);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L);
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 49);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x300002L);
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 49);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100180004000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 50);
         break;
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L);
      case 52:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 50);
         break;
      case 54:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x600000000L);
      case 102:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 103:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 104:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 49);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 49);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 50);
         break;
      case 52:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 49);
         break;
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 49);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L);
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 49);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x600000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa8_0(active1, 0x400000000L);
      case 54:
         return jjMoveStringLiteralDfa8_0(active1, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x2L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 49);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000L);
      case 52:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 97, 50);
         break;
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 49);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 56:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 98, 50);
         break;
      case 103:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 104:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 78, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(19, 20); }
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(17); }
                  }
                  break;
               case 48:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 34)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  break;
               case 49:
                  if ((0x83ff0038ffffd9ffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 8:
                  if ((0x83ff0038ffffd9ffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 0:
                  if ((0x83ff0038ffffd9ffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAddStates(4, 8); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(9, 10); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAddStates(11, 18); }
                  }
                  break;
               case 50:
                  if ((0x83ff0038ffffd9ffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 6:
                  if ((0x83ff0038ffffd9ffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 4:
                  if ((0x83ff0038ffffd9ffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 7:
                  if ((0x83ff0038ffffd9ffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(1); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if ((0x83ff0038ffffd9ffL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 14:
                  if (curChar == 34 && kind > 112)
                     kind = 112;
                  break;
               case 15:
                  if (curChar == 47)
                     { jjAddStates(9, 10); }
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 42)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 21:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 20); }
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 20); }
                  break;
               case 23:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(11, 18); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 46)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(28); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if (curChar == 46 && kind > 9)
                     kind = 9;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if (curChar != 34)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddStates(4, 8); }
                  break;
               case 36:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 39:
                  if (curChar == 34 && kind > 11)
                     kind = 11;
                  break;
               case 41:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 92)
                     { jjAddStates(22, 27); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(47); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 49:
                  if ((0xc7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 8:
                  if ((0xc7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 0:
                  if ((0xc7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 50:
                  if ((0xc7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 6:
                  if ((0xc7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if (curChar == 115)
                     { jjCheckNAdd(2); }
                  break;
               case 4:
                  if ((0xc7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0xc7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 111)
                        kind = 111;
                     { jjCheckNAdd(12); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 2:
                  if (curChar == 101 && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 117)
                     { jjCheckNAdd(2); }
                  break;
               case 5:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 9:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if ((0xc7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 17:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 21:
               case 22:
                  { jjCheckNAddTwoStates(22, 20); }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(34); }
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 37:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 40:
                  if (curChar == 92)
                     { jjAddStates(22, 27); }
                  break;
               case 42:
                  if (curChar == 114)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 43:
                  if (curChar == 118)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 44:
                  if (curChar == 116)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 45:
                  if (curChar == 110)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 46:
                  if (curChar == 102)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(47); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 49:
               case 12:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(12); }
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 21:
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(22, 20); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\53", "\55", "\52", "\57", "\45", "\53\53", "\55\55", 
"\75\75", "\41\75", "\76", "\74", "\76\75", "\74\75", "\46", "\174", "\136", "\74\74", 
"\76\76", "\46\46", "\174\174", "\41", "\75", "\72\75", "\53\75", "\55\75", "\52\75", 
"\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\72", "\56", "\54", "\42", "\47", 
"\142\162\145\141\153", "\144\145\146\141\165\154\164", "\146\165\156\143", 
"\151\156\164\145\162\146\141\143\145", "\163\145\154\145\143\164", "\143\141\163\145", "\144\145\146\145\162", 
"\147\157", "\155\141\160", "\163\164\162\165\143\164", "\143\150\141\156", 
"\145\154\163\145", "\147\157\164\157", "\160\141\143\153\141\147\145", 
"\163\167\151\164\143\150", "\143\157\156\163\164", "\146\141\154\154\164\150\162\157\165\147\150", 
"\151\146", "\162\141\156\147\145", "\164\171\160\145", 
"\143\157\156\164\151\156\165\145", "\146\157\162", "\151\155\160\157\162\164", "\162\145\164\165\162\156", 
"\166\141\162", "\165\151\156\164\70", "\165\151\156\164\61\66", "\165\151\156\164\63\62", 
"\165\151\156\164\66\64", "\151\156\164\70", "\151\156\164\61\66", "\151\156\164\63\62", 
"\151\156\164\66\64", "\146\154\157\141\164\63\62", "\146\154\157\141\164\66\64", 
"\143\157\155\160\154\145\170\66\64", "\143\157\155\160\154\145\170\61\62\70", "\142\171\164\145", 
"\162\165\156\145", "\165\151\156\164", "\151\156\164", "\165\151\156\164\160\164\162", 
"\163\164\162\151\156\147", "\142\157\157\154", "\155\141\151\156", "\146\155\164", 
"\120\162\151\156\164\146", "\123\143\141\156\146", null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   36, 37, 39, 40, 36, 37, 39, 47, 40, 16, 18, 25, 26, 27, 29, 30, 
   31, 32, 33, 21, 20, 23, 41, 42, 43, 44, 45, 46, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  showTidyPair("tipo_de_dato_entero", image);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                 showTidyPair("tipo_de_dato_flotante", image);
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            showTidyPair("tipo_de_dato_booleano", image);
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                                                      showTidyPair("tipo_de_dato_cadena", image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                    showTidyPair("operador_aritm\u00e9tico_suma", image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                         showTidyPair("operador_aritm\u00e9tico_resta", image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                            showTidyPair("operador_aritm\u00e9tico_multiplicaci\u00f3n", image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                      showTidyPair("operador_aritm\u00e9tico_divisi\u00f3n", image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                       showTidyPair("operador_aritm\u00e9tico_residuo", image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                        showTidyPair("operador_aritm\u00e9tico_incremento", image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                        showTidyPair("operador_aritm\u00e9tico_decremento", image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                  showTidyPair("operador_relacional_igual", image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                        showTidyPair("operador_relacional_diferente", image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                          showTidyPair("operador_relacional_mayor_que", image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                       showTidyPair("operador_relacional_menor_que", image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                                    showTidyPair("operador_relacional_mayor_o_igual_que", image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                                 showTidyPair("operador_relacional_menor_o_igual_que", image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                       showTidyPair("operador_logico_nivel_bit_and", image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                  showTidyPair("operador_logico_nivel_bit_or", image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                                  showTidyPair("operador_logico_nivel_bit_xor", image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                         showTidyPair("operador_logico_nivel_bit_corrimiento_bits_izquierda", image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                          showTidyPair("operador_logico_nivel_bit_corrimiento_bits_derecha", image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                showTidyPair("operador_logico_and", image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                 showTidyPair("operador_logico_or", image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                 showTidyPair("operador_logico_not", image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                      showTidyPair("operador_asignaci\u00f3n", image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                                 showTidyPair("operador_asignaci\u00f3n_din\u00e1mica", image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                                  showTidyPair("operador_asignaci\u00f3n_suma", image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                                     showTidyPair("operador_asignaci\u00f3n_resta", image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                                        showTidyPair("operador_asignaci\u00f3n_multiplicaci\u00f3n", image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                                  showTidyPair("operador_asignaci\u00f3n_divisi\u00f3n", image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                                   showTidyPair("operador_asignaci\u00f3n_residuo", image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                                     showTidyPair("operador_asignaci\u00f3n_and", image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                                              showTidyPair("operador_asignaci\u00f3n_or", image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                                              showTidyPair("operador_asignaci\u00f3n_xor", image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                                     showTidyPair("operador_asignaci\u00f3n_corrimiento_bits_izquierda", image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                                      showTidyPair("operador_asignaci\u00f3n_corrimiento_bits_derecha", image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                                  showTidyPair("s\u00edmbolo_parentesis_apertura", image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                                    showTidyPair("s\u00edmbolo_parentesis_cierre", image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                                    showTidyPair("s\u00edmbolo_llave_apertura", image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                                    showTidyPair("s\u00edmbolo_llave_cierre", image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                                     showTidyPair("s\u00edmbolo_corchete_apertura", image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                                     showTidyPair("s\u00edmbolo_corchete_cierre", image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                       showTidyPair("s\u00edmbolo_punto_y_coma", image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                   showTidyPair("s\u00edmbolo_doble_punto", image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                 showTidyPair("s\u00edmbolo_punto", image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                   showTidyPair("s\u00edmbolo_coma", image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                            showTidyPair("s\u00edmbolo_doble_comilla", image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                    showTidyPair("s\u00edmbolo_comilla", image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                              showTidyPair("palabra_reservada", image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                                  showTidyPair("palabra_reservada", image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                          showTidyPair("palabra_reservada", image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                    showTidyPair("palabra_reservada", image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                      showTidyPair("palabra_reservada", image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                              showTidyPair("palabra_reservada", image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                          showTidyPair("palabra_reservada", image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                                      showTidyPair("palabra_reservada", image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                    showTidyPair("palabra_reservada", image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                          showTidyPair("palabra_reservada", image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                                showTidyPair("palabra_reservada", image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                      showTidyPair("palabra_reservada", image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                      showTidyPair("palabra_reservada", image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                          showTidyPair("palabra_reservada", image);
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
                          showTidyPair("palabra_reservada", image);
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                          showTidyPair("palabra_reservada", image);
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
                          showTidyPair("palabra_reservada", image);
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
                              showTidyPair("palabra_reservada", image);
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
                              showTidyPair("palabra_reservada", image);
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
                                  showTidyPair("palabra_reservada", image);
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
                                    showTidyPair("palabra_reservada", image);
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 102 :
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
                      showTidyPair("palabra_reservada", image);
         break;
      case 103 :
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
                              showTidyPair("palabra_reservada", image);
         break;
      case 104 :
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
                            showTidyPair("palabra_reservada", image);
         break;
      case 105 :
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
                        showTidyPair("palabra_reservada", image);
         break;
      case 106 :
        image.append(jjstrLiteralImages[106]);
        lengthOfMatch = jjstrLiteralImages[106].length();
                     showTidyPair("palabra_reservada_main", image);
         break;
      case 107 :
        image.append(jjstrLiteralImages[107]);
        lengthOfMatch = jjstrLiteralImages[107].length();
                           showTidyPair("nombre_paquete", image);
         break;
      case 108 :
        image.append(jjstrLiteralImages[108]);
        lengthOfMatch = jjstrLiteralImages[108].length();
                            showTidyPair("funciones_paquete", image);
         break;
      case 109 :
        image.append(jjstrLiteralImages[109]);
        lengthOfMatch = jjstrLiteralImages[109].length();
                          showTidyPair("funciones_paquete", image);
         break;
      case 110 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                     showTidyPair("identificador", image);
         break;
      case 111 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      showTidyPair("cadenas_no_validas", image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GoTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public GoTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 48; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe0f01L, 0x1ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[48];
    static private final int[] jjstateSet = new int[2 * 48];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
