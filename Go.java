/* Go.java */
/* Generated By:JavaCC: Do not edit this line. Go.java */
import java.util.ArrayList;

public class Go implements GoConstants {

    private static Go analyzer;
    private static SymbolTable symbolTable = new SymbolTable();
    private static CustomError customError;
    public static final String LEXICO = "L\u00c9XICO";
    public static final String SINTACTICO = "SINT\u00c1CTICO";
    public static Token auxToken;
    public static String errorsSemantics = "";

    public static void main(String args[]) throws ParseException {
        try {
            customError = new CustomError();
            analyzer = new Go(System.in);
            analyzer.compile();

            if(customError.getErrorsLexicon().isEmpty() && customError.getErrorsSintactic().isEmpty() && errorsSemantics.isEmpty()) {
                System.out.println("COMPILADO CORRECTAMENTE");
                guardar("lexico","");
                guardar("sintactico","");
                guardar("semantico","");
            }else {
                System.out.println("NO COMPILADO CORRECTAMENTE, OCURRIERON ERRORES DURANTE COMPILACI\u00d3N");

                if(!customError.getErrorsLexicon().isEmpty()) {
                    System.out.println("\n\nERRORES LEXICOS: ");
                    guardar("lexico",customError.getErrorsLexicon());
                    System.out.println(customError.getErrorsLexicon());
                }
                if(!customError.getErrorsSintactic().isEmpty()) {
                    System.out.println("\n\nERRORES SINTACTICOS: ");
                    System.out.println(customError.getErrorsSintactic());
                    guardar("sintactico",customError.getErrorsSintactic());
                }
                if(!errorsSemantics.isEmpty()) {
                    System.out.println("\n\nERRORES SEMANTICOS: ");
                    System.out.println(errorsSemantics);
                    guardar("semantico",errorsSemantics);
                }
            }
        }catch(ParseException e) {
            System.out.println("MAIN HILO" + e.getMessage());
        }finally {
            /*Guardar en archivos por separado de acuerdo al tipo de error
            System.out.println("ERRORES LEXICOS: ");
            System.out.println(customError.getErrorsLexicon());
            System.out.println("ERRORES SINTACTICOS: ");
            System.out.println(customError.getErrorsSintactic());
            System.out.println("ERRORES SEMANTICOS: ");
            System.out.println(errorsSemantics);*/
        }
    }
     public static void guardar(String errortype,String errors) {
            String ruta =  System.getProperty("user.dir") + "/errores/"+errortype+".txt";
            ArrayList<String> nuevo = new ArrayList();
            nuevo.add(errors);
            Archivo.grabarArchivo(ruta, nuevo);
    }

  static final public void compile() throws ParseException {
    try {
      packageStatement();
      importStatement();
      mainFunctionStatement();
    } catch (ParseException e) {
System.out.println("compile: " + e.getMessage());
    }
}

/*declaración de paquete
PS = package statement
*/
  static final public void packageStatement() throws ParseException {String msg = "package";
    try {
      if (jj_2_1(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case rw_package:{
          jj_consume_token(rw_package);
          break;
          }
        case invalid_string:{
          jj_consume_token(invalid_string);
saveErrorLexicon(msg);
          break;
          }
        case id:{
          jj_consume_token(id);
saveErrorSintactic(msg);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case main:{
          jj_consume_token(main);
          break;
          }
        case invalid_string:{
          jj_consume_token(invalid_string);
saveErrorLexicon(msg);
          break;
          }
        case id:{
          jj_consume_token(id);
saveErrorSintactic(msg);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case main:{
          errorPackagePS();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          if (jj_2_2(2)) {
            errorIdPS();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
System.out.println("package: " + e.getMessage());
    }
}

  static final public void errorPackagePS() throws ParseException {
    jj_consume_token(main);
customError.saveErrorSintactic(token, "package");
}

  static final public void errorIdPS() throws ParseException {
    jj_consume_token(rw_package);
customError.saveErrorSintactic(token, "package");
}

/*importación de librerias
IS = import statement
*/
  static final public void importStatement() throws ParseException {String msg = "import";
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case string_literal:
        case opening_round_brackets:
        case rw_import:
        case id:
        case invalid_string:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        if (jj_2_3(4)) {
          jj_consume_token(rw_import);
          jj_consume_token(opening_round_brackets);
          label_2:
          while (true) {
            jj_consume_token(string_literal);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case string_literal:{
              ;
              break;
              }
            default:
              jj_la1[4] = jj_gen;
              break label_2;
            }
          }
          jj_consume_token(closing_round_brackets);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case opening_round_brackets:{
            errorImportShortcutIS();
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            if (jj_2_4(3)) {
              errorOpeningRoundBracketIS();
            } else if (jj_2_5(3)) {
              errorPackageNameShortcutIS();
            } else if (jj_2_6(3)) {
              errorClosingBracketIS();
            } else if (jj_2_7(2)) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case rw_import:{
                jj_consume_token(rw_import);
                break;
                }
              case invalid_string:{
                jj_consume_token(invalid_string);
saveErrorLexicon(msg);
                break;
                }
              case id:{
                jj_consume_token(id);
saveErrorSintactic(msg);
                break;
                }
              default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              jj_consume_token(string_literal);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case string_literal:{
                errorImportIS();
                break;
                }
              case rw_import:{
                errorPackageNameIS();
                break;
                }
              default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (ParseException e) {
System.out.println("import: " + e.getMessage());
    }
}

//errores de importación de librerias con un solo import
  static final public void errorImportShortcutIS() throws ParseException {
    jj_consume_token(opening_round_brackets);
customError.saveErrorSintactic(token, "import");
    jj_consume_token(string_literal);
    jj_consume_token(closing_round_brackets);
}

  static final public void errorOpeningRoundBracketIS() throws ParseException {
    jj_consume_token(rw_import);
customError.saveErrorSintactic(token, "import");
    jj_consume_token(string_literal);
    jj_consume_token(closing_round_brackets);
}

  static final public void errorPackageNameShortcutIS() throws ParseException {
    jj_consume_token(rw_import);
    jj_consume_token(opening_round_brackets);
customError.saveErrorSintactic(token, "import");
    jj_consume_token(closing_round_brackets);
}

  static final public void errorClosingBracketIS() throws ParseException {
    jj_consume_token(rw_import);
    jj_consume_token(opening_round_brackets);
    jj_consume_token(string_literal);
customError.saveErrorSintactic(token, "import");
}

//errores importación de librerias por separado
  static final public void errorImportIS() throws ParseException {
    jj_consume_token(string_literal);
customError.saveErrorSintactic(token, "import");
}

  static final public void errorPackageNameIS() throws ParseException {
    jj_consume_token(rw_import);
customError.saveErrorSintactic(token, "import");
}

/*declaración de sentencias*/
  static final public void sentences() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case integer_literal:
      case floating_literal:
      case boolean_literal:
      case string_literal:
      case not:
      case opening_round_brackets:
      case rw_switch:
      case rw_const:
      case rw_if:
      case rw_for:
      case rw_var:
      case library_fmt:
      case id:
      case invalid_string:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      if (jj_2_8(5)) {
        variableStatement();
      } else if (jj_2_9(4)) {
        dynamicVariableStatement();
      } else if (jj_2_10(4)) {
        arithmeticExpressionStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case rw_switch:{
          switchStatement();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          if (jj_2_11(2)) {
            ifElseStatement();
          } else if (jj_2_12(5)) {
            forStatement();
          } else if (jj_2_13(4)) {
            printfSatement();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
}

/*declaracion de funcion main*/
  static final public void mainFunctionStatement() throws ParseException {String msg = "variable";
    try {
      bodyMain();
      sentences();
      closingCurlyBracketMain();
    } catch (ParseException e) {
Token t = e.currentToken.next;
        String tokenImage = e.tokenImage[t.kind];
        if(tokenImage.equals("<invalid_string>")) {
            saveErrorLexicon(msg);
        }else {
            saveErrorSintactic(msg);
        }
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
        sentences();
    }
}

  static final public void closingCurlyBracketMain() throws ParseException {
    jj_consume_token(closing_curly_brackets);
}

  static final public void bodyMain() throws ParseException {
    try {
      jj_consume_token(rw_func);
      jj_consume_token(main);
      jj_consume_token(opening_round_brackets);
      jj_consume_token(closing_round_brackets);
      jj_consume_token(opening_curly_brackets);
    } catch (ParseException e) {
System.out.println("bodyMain: " + e);
    }
}

/*declaración tipos de datos*/
  static final public void dataType() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case dt_uint8:{
        jj_consume_token(dt_uint8);
        break;
        }
      case dt_uint16:{
        jj_consume_token(dt_uint16);
        break;
        }
      case dt_uint32:{
        jj_consume_token(dt_uint32);
        break;
        }
      case dt_uint64:{
        jj_consume_token(dt_uint64);
        break;
        }
      case dt_int8:{
        jj_consume_token(dt_int8);
        break;
        }
      case dt_int16:{
        jj_consume_token(dt_int16);
        break;
        }
      case dt_int32:{
        jj_consume_token(dt_int32);
        break;
        }
      case dt_int64:{
        jj_consume_token(dt_int64);
        break;
        }
      case dt_float32:{
        jj_consume_token(dt_float32);
        break;
        }
      case dt_float64:{
        jj_consume_token(dt_float64);
        break;
        }
      case dt_complex64:{
        jj_consume_token(dt_complex64);
        break;
        }
      case dt_complex128:{
        jj_consume_token(dt_complex128);
        break;
        }
      case dt_byte:{
        jj_consume_token(dt_byte);
        break;
        }
      case dt_rune:{
        jj_consume_token(dt_rune);
        break;
        }
      case dt_uint:{
        jj_consume_token(dt_uint);
        break;
        }
      case dt_int:{
        jj_consume_token(dt_int);
        break;
        }
      case dt_uintptr:{
        jj_consume_token(dt_uintptr);
        break;
        }
      case dt_string:{
        jj_consume_token(dt_string);
        break;
        }
      case dt_bool:{
        jj_consume_token(dt_bool);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println("dataType: " + e);
    }
}

/*declaración literales de tipos de datos*/
  static final public void dataLiteral() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case boolean_literal:{
        jj_consume_token(boolean_literal);
        break;
        }
      case floating_literal:{
        jj_consume_token(floating_literal);
        break;
        }
      case integer_literal:{
        jj_consume_token(integer_literal);
        break;
        }
      case string_literal:{
        jj_consume_token(string_literal);
        break;
        }
      case id:{
        jj_consume_token(id);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println("dataLiteral: " + e);
    }
}

/*declaración de variables
VS = variable statement
*/
  static final public void variableStatement() throws ParseException {String msg = "variable";
    String answer = "";
    ArrayList<Token> varList = new ArrayList<>();
    Token var;
    int dt;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case rw_var:{
        jj_consume_token(rw_var);
        break;
        }
      case rw_const:{
        jj_consume_token(rw_const);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      identificatorList();
var=token;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case dt_uint8:
      case dt_uint16:
      case dt_uint32:
      case dt_uint64:
      case dt_int8:
      case dt_int16:
      case dt_int32:
      case dt_int64:
      case dt_float32:
      case dt_float64:
      case dt_complex64:
      case dt_complex128:
      case dt_byte:
      case dt_rune:
      case dt_uint:
      case dt_int:
      case dt_uintptr:
      case dt_string:
      case dt_bool:{
        dataType();
dt=token.kind;
                answer = symbolTable.insertSymbol(var, dt);
                if(!answer.isEmpty()) {
                    errorsSemantics += answer;
                }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case assignment:{
          jj_consume_token(assignment);
          listAssignment(var);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
        }
      case assignment:{
        jj_consume_token(assignment);
        listAssignment(var);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_14(2)) {
        jj_consume_token(semicolon);
      } else {
        ;
      }
    } catch (ParseException e) {
Token t = e.currentToken.next;
        String tokenImage = e.tokenImage[t.kind];
        if(tokenImage.equals("<invalid_string>")) {
            saveErrorLexicon(msg);
        }else {
            saveErrorSintactic(msg);
        }
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void identificatorList() throws ParseException {
    jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case comma:{
      jj_consume_token(comma);
      identificatorList();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
}

/*asignacion de variables*/
  static final public void listAssignment(Token var) throws ParseException {
    arithmeticExpression(var);
    if (jj_2_15(2)) {
      jj_consume_token(comma);
      listAssignment(var);
    } else {
      ;
    }
}

//declaracion de variable de tipado dinamico
  static final public void dynamicVariableStatement() throws ParseException {Token var;
    try {
      identificatorList();
var = token;
      jj_consume_token(dynamic_assignment);
      listAssignment(var);
      if (jj_2_16(2)) {
        jj_consume_token(semicolon);
      } else {
        ;
      }
    } catch (ParseException e) {
System.out.println("dynamicVariableStatement: " + e);
    }
}

/*delcaracion de operaciones aritmeticas*/
  static final public void arithmeticExpressionStatement() throws ParseException {Token var;
    try {
      jj_consume_token(id);
var = token;
      assignmentOperators();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case invalid_string:{
        invalidString("variable");
        break;
        }
      case integer_literal:
      case floating_literal:
      case boolean_literal:
      case string_literal:
      case opening_round_brackets:
      case id:{
        arithmeticExpression(var);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_17(2)) {
        jj_consume_token(semicolon);
      } else {
        ;
      }
    } catch (ParseException e) {
System.out.println("arithmeticExpressionStatement: " + e);
    }
}

  static final public void arithmeticExpression(Token var) throws ParseException {Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case integer_literal:
    case floating_literal:
    case boolean_literal:
    case string_literal:
    case id:{
      dataLiteral();
      break;
      }
    case opening_round_brackets:{
      jj_consume_token(opening_round_brackets);
      arithmeticExpression(var);
      jj_consume_token(closing_round_brackets);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
catchSemanticsErrorAE(var, token, operator);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case addition:
      case subtraction:
      case multiplication:
      case division:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case addition:{
        jj_consume_token(addition);
        break;
        }
      case subtraction:{
        jj_consume_token(subtraction);
        break;
        }
      case multiplication:{
        jj_consume_token(multiplication);
        break;
        }
      case division:{
        jj_consume_token(division);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
operator = token;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case integer_literal:
      case floating_literal:
      case boolean_literal:
      case string_literal:
      case id:{
        dataLiteral();
        break;
        }
      case opening_round_brackets:{
        jj_consume_token(opening_round_brackets);
        arithmeticExpression(var);
        jj_consume_token(closing_round_brackets);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
catchSemanticsErrorAE(var, token, operator);
    }
}

  static void catchSemanticsErrorAE(Token var, Token value, Token operator) throws ParseException {String answer = "";
    if( token.kind != opening_round_brackets && token.kind != closing_round_brackets ) {
        answer = symbolTable.checkAssignment(var, value, operator);
        if(!answer.isEmpty()) {
            errorsSemantics += answer;
        }
    }
  }

/*declaracion condicionales*/

//condicional if, else if, else
  static final public void ifElseStatement() throws ParseException {String msg = "if";
    try {
      bodyIf();
      sentences();
      closingCurlyBracketIfElse();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case opening_curly_brackets:
      case rw_else:{
        if (jj_2_18(2)) {
          jj_consume_token(rw_else);
          ifElseStatement();
        } else if (jj_2_19(2)) {
          elseStatement();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (ParseException e) {
//System.out.println("ifElseStatement: " + e);
        Token t = e.currentToken.next;
        String tokenImage = e.tokenImage[t.kind];
        if(tokenImage.equals("<invalid_string>")) {
            saveErrorLexicon(msg);
        }else {
            saveErrorSintactic(msg);
        }
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void bodyIf() throws ParseException {
    jj_consume_token(rw_if);
    if (jj_2_20(2)) {
      jj_consume_token(opening_round_brackets);
    } else {
      ;
    }
    relationalComparationIf();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case closing_round_brackets:{
      jj_consume_token(closing_round_brackets);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(opening_curly_brackets);
}

  static final public void closingCurlyBracketIfElse() throws ParseException {
    jj_consume_token(closing_curly_brackets);
}

  static final public void elseStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case rw_else:{
      jj_consume_token(rw_else);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(opening_curly_brackets);
    sentences();
    jj_consume_token(closing_curly_brackets);
}

  static final public void relationalComparationIf() throws ParseException {
    if (jj_2_21(2)) {
      jj_consume_token(not);
    } else {
      ;
    }
    if (jj_2_22(2)) {
      jj_consume_token(opening_round_brackets);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case invalid_string:{
      invalidString("if");
      break;
      }
    case integer_literal:
    case floating_literal:
    case boolean_literal:
    case string_literal:
    case id:{
      relationalComparationOperands();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    relationalOperators();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case invalid_string:{
      invalidString("if");
      break;
      }
    case integer_literal:
    case floating_literal:
    case boolean_literal:
    case string_literal:
    case id:{
      relationalComparationOperands();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case semicolon:{
      jj_consume_token(semicolon);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    if (jj_2_23(2)) {
      jj_consume_token(closing_round_brackets);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:
    case or:{
      conjunctionOperators();
      relationalComparationIf();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
}

  static final public void relationalComparation() throws ParseException {
    if (jj_2_24(2)) {
      jj_consume_token(not);
    } else {
      ;
    }
    if (jj_2_25(2)) {
      jj_consume_token(opening_round_brackets);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    relationalComparationOperands();
    relationalOperators();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    relationalComparationOperands();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case semicolon:{
      jj_consume_token(semicolon);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    if (jj_2_26(2)) {
      jj_consume_token(closing_round_brackets);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:
    case or:{
      conjunctionOperators();
      relationalComparation();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
}

  static final public void relationalComparationOperands() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case floating_literal:{
      jj_consume_token(floating_literal);
      break;
      }
    case integer_literal:{
      jj_consume_token(integer_literal);
      break;
      }
    case string_literal:{
      jj_consume_token(string_literal);
      break;
      }
    case boolean_literal:{
      jj_consume_token(boolean_literal);
      break;
      }
    case id:{
      jj_consume_token(id);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void relationalOperators() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case equal:{
      jj_consume_token(equal);
      break;
      }
    case not_equal:{
      jj_consume_token(not_equal);
      break;
      }
    case greater_than:{
      jj_consume_token(greater_than);
      break;
      }
    case less_than:{
      jj_consume_token(less_than);
      break;
      }
    case greater_than_or_equal:{
      jj_consume_token(greater_than_or_equal);
      break;
      }
    case less_than_or_equal:{
      jj_consume_token(less_than_or_equal);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void conjunctionOperators() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      jj_consume_token(and);
      break;
      }
    case or:{
      jj_consume_token(or);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//condicional switch
  static final public void switchStatement() throws ParseException {
    try {
      expressionSwitchStatement();
    } catch (ParseException e) {
System.out.println("switchStatement: " + e);
    }
}

  static final public void expressionSwitchStatement() throws ParseException {String msg = "switch";
    Token var;
    try {
      if (jj_2_27(3)) {
        jj_consume_token(rw_switch);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case opening_round_brackets:{
          jj_consume_token(opening_round_brackets);
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(id);
var = token;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case closing_round_brackets:{
          jj_consume_token(closing_round_brackets);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        jj_consume_token(opening_curly_brackets);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case rw_case:{
            ;
            break;
            }
          default:
            jj_la1[39] = jj_gen;
            break label_5;
          }
          caseSwitchStatement(var);
        }
        closingCurlyBracketSwtich();
      } else if (jj_2_28(3)) {
        errorOpeningCurlyBracketESS();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
//System.out.println("expressionSwitchStatement: " + e);
        Token t = e.currentToken.next;
        String tokenImage = e.tokenImage[t.kind];
        if(tokenImage.equals("<invalid_string>")) {
            saveErrorLexicon(msg);
        }else {
            saveErrorSintactic(msg);
        }
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void closingCurlyBracketSwtich() throws ParseException {
    jj_consume_token(closing_curly_brackets);
}

  static final public void errorOpeningCurlyBracketESS() throws ParseException {Token var;
    jj_consume_token(rw_switch);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opening_round_brackets:{
      jj_consume_token(opening_round_brackets);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(id);
var = token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case closing_round_brackets:{
      jj_consume_token(closing_round_brackets);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
saveErrorSintactic("switch");
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case rw_case:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_6;
      }
      caseSwitchStatement(var);
    }
    jj_consume_token(closing_curly_brackets);
}

  static final public void caseSwitchStatement(Token var) throws ParseException {
    try {
      jj_consume_token(rw_case);
      listAssignmentCaseSwitch(var);
      jj_consume_token(colon);
      sentences();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case rw_break:{
        jj_consume_token(rw_break);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case semicolon:{
        jj_consume_token(semicolon);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case rw_default:{
        defaultSwitchStatement();
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    } catch (ParseException e) {
System.out.println("caseSwitchStatement: " + e);
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void defaultSwitchStatement() throws ParseException {
    try {
      jj_consume_token(rw_default);
      jj_consume_token(colon);
      sentences();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case rw_break:{
        jj_consume_token(rw_break);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case semicolon:{
        jj_consume_token(semicolon);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (ParseException e) {
System.out.println("defaultSwitchStatement: " + e);
    }
}

  static final public void listAssignmentCaseSwitch(Token var) throws ParseException {
    try {
      dataLiteralCaseSwitch();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comma:{
        jj_consume_token(comma);
        listAssignment(var);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (ParseException e) {
System.out.println("listAssignmentCaseSwitch: " + e);
    }
}

  static final public void dataLiteralCaseSwitch() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case string_literal:{
        jj_consume_token(string_literal);
        break;
        }
      case integer_literal:{
        jj_consume_token(integer_literal);
        break;
        }
      case id:{
        jj_consume_token(id);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println("dataLiteralCaseSwitch: " + e);
    }
}

/*ciclo for*/
  static final public void forStatement() throws ParseException {
    try {
      forWithOneStopConditionStatement();
    } catch (ParseException e) {
//System.out.println("forStatement: " + e);
        int[] skipTo = {
            closing_curly_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void forWithOneStopConditionStatement() throws ParseException {
    bodyFor();
    sentences();
    closingCurlyBracketFor();
}

  static final public void closingCurlyBracketFor() throws ParseException {
    jj_consume_token(closing_curly_brackets);
}

  static final public void bodyFor() throws ParseException {String msg = "for";
    try {
      if (jj_2_29(4)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case rw_for:{
          jj_consume_token(rw_for);
          break;
          }
        case invalid_string:{
          jj_consume_token(invalid_string);
saveErrorLexicon(msg);
          break;
          }
        case id:{
          jj_consume_token(id);
saveErrorLexicon(msg);
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case opening_round_brackets:{
          jj_consume_token(opening_round_brackets);
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        conditionFor();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case closing_round_brackets:{
          jj_consume_token(closing_round_brackets);
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          ;
        }
        jj_consume_token(opening_curly_brackets);
      } else if (jj_2_30(4)) {
        errorFWOSCS();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Token t = e.currentToken.next;
        String tokenImage = e.tokenImage[t.kind];
        if(tokenImage.equals("<invalid_string>")) {
            saveErrorLexicon(msg);
        }else {
            saveErrorSintactic(msg);
        }
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void errorFWOSCS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opening_round_brackets:{
      jj_consume_token(opening_round_brackets);
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      ;
    }
saveErrorSintactic("for");
    conditionFor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case closing_round_brackets:{
      jj_consume_token(closing_round_brackets);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(opening_curly_brackets);
}

  static final public void conditionFor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    relationalComparationOperands();
    relationalOperators();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    relationalComparationOperands();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:
    case or:{
      conjunctionOperators();
      conditionFor();
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
}

  static final public void assignmentOperators() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case assignment:{
        jj_consume_token(assignment);
        break;
        }
      case addition_assignment:{
        jj_consume_token(addition_assignment);
        break;
        }
      case subtraction_assignment:{
        jj_consume_token(subtraction_assignment);
        break;
        }
      case multiplication_assignment:{
        jj_consume_token(multiplication_assignment);
        break;
        }
      case division_assignment:{
        jj_consume_token(division_assignment);
        break;
        }
      case remainder_assignment:{
        jj_consume_token(remainder_assignment);
        break;
        }
      case bitwise_and_assignment:{
        jj_consume_token(bitwise_and_assignment);
        break;
        }
      case bitwise_inclusive_or_assignment:{
        jj_consume_token(bitwise_inclusive_or_assignment);
        break;
        }
      case bitwise_exclusive_or_assignment:{
        jj_consume_token(bitwise_exclusive_or_assignment);
        break;
        }
      case left_shift_assignment:{
        jj_consume_token(left_shift_assignment);
        break;
        }
      case right_shift_assignment:{
        jj_consume_token(right_shift_assignment);
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println("assignmentOperators: " + e);
    }
}

/*declaracion entrada y salida*/

//sentencia de impresión
  static final public void printfSatement() throws ParseException {String msg = "printf/scanf";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case library_fmt:{
        jj_consume_token(library_fmt);
        jj_consume_token(dot);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case rw_printf:{
          jj_consume_token(rw_printf);
          break;
          }
        case rw_scanf:{
          jj_consume_token(rw_scanf);
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case id:{
        jj_consume_token(id);
saveErrorSintactic(msg);
        break;
        }
      case invalid_string:{
        jj_consume_token(invalid_string);
saveErrorLexicon(msg);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(opening_round_brackets);
      jj_consume_token(string_literal);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comma:{
        if (jj_2_33(2)) {
          jj_consume_token(comma);
          label_7:
          while (true) {
            if (jj_2_31(3)) {
              ;
            } else {
              break label_7;
            }
            jj_consume_token(id);
            jj_consume_token(comma);
          }
          jj_consume_token(id);
        } else if (jj_2_34(2)) {
          jj_consume_token(comma);
          label_8:
          while (true) {
            if (jj_2_32(3)) {
              ;
            } else {
              break label_8;
            }
            jj_consume_token(bitwise_and);
            jj_consume_token(id);
            jj_consume_token(comma);
          }
          jj_consume_token(bitwise_and);
          jj_consume_token(id);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(closing_round_brackets);
      if (jj_2_35(2)) {
        jj_consume_token(semicolon);
      } else {
        ;
      }
    } catch (ParseException e) {
Token t = e.currentToken.next;
        String tokenImage = e.tokenImage[t.kind];
        if(tokenImage.equals("<invalid_string>")) {
            saveErrorLexicon(msg);
        }else {
            saveErrorSintactic(msg);
        }
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void scanfSatement() throws ParseException {String msg = "Scanf";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case library_fmt:{
        jj_consume_token(library_fmt);
        jj_consume_token(dot);
        jj_consume_token(rw_scanf);
        break;
        }
      case id:{
        jj_consume_token(id);
saveErrorSintactic(msg);
        break;
        }
      case invalid_string:{
        jj_consume_token(invalid_string);
saveErrorLexicon(msg);
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(opening_round_brackets);
      jj_consume_token(string_literal);
      jj_consume_token(comma);
      label_9:
      while (true) {
        if (jj_2_36(3)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(bitwise_and);
        jj_consume_token(id);
        jj_consume_token(comma);
      }
      jj_consume_token(bitwise_and);
      jj_consume_token(id);
      jj_consume_token(closing_round_brackets);
      if (jj_2_37(2)) {
        jj_consume_token(semicolon);
      } else {
        ;
      }
    } catch (ParseException e) {
Token t = e.currentToken.next;
        String tokenImage = e.tokenImage[t.kind];
        if(tokenImage.equals("<invalid_string>")) {
            saveErrorLexicon(msg);
        }else {
            saveErrorSintactic(msg);
        }
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static private void recoverFromError(ParseException e, int[] skipTo) throws ParseException {//Recover
    boolean loop = true;
        do {
                token = getNextToken();
                for (int i = 0; i < skipTo.length; i++) {
                        if (token.kind ==  skipTo[i]) {
                loop = false;
                break;
            }
                }
    }while(loop);
  }

  static private void showPossibleExpectedTokens(ParseException e) throws ParseException {//Get the possible expected tokens
        StringBuffer expected = new StringBuffer();
        for(int i = 0; i < e.expectedTokenSequences.length; i++) {
                for(int j = 0; j < e.expectedTokenSequences[i].length;j++) {
                        expected.append("\n");
                        expected.append("     ");
                        expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                        expected.append("...");
                }
        }
        //Print error message
        if (e.expectedTokenSequences.length == 1) {
                //reportParserError("\"%s\" found where %s sought", getToken(1), expected);
        }else {
                //reportParserError("\"%s\" found where one of %s sought", getToken(1), expected);
        }
  }

  static private void saveErrorSintactic(String msg) throws ParseException {customError.saveErrorSintactic(token, msg);
  }

  static private void saveErrorLexicon(String msg) throws ParseException {customError.saveErrorLexicon(token, msg);
  }

/*
Utilidades para capturar errores lexicos, de tipo
cadenas no validas.
*/
  static final public void invalidString(String msg) throws ParseException {
    try {
{if (true) throw new ParseException();}
      jj_consume_token(invalid_string);
    } catch (ParseException e) {
saveErrorLexicon(msg);
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets, closing_curly_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void invalidId(String msg) throws ParseException {
    try {
{if (true) throw new ParseException();}
      jj_consume_token(id);
    } catch (ParseException e) {
saveErrorSintactic(msg);
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets, closing_curly_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void invalidEmpty(String msg) throws ParseException {
    try {
{if (true) throw new ParseException();}
    } catch (ParseException e) {
saveErrorSintactic(msg);
        int[] skipTo = {
            dt_int, dt_float64, opening_curly_brackets,
            closing_round_brackets, closing_curly_brackets
        };
        recoverFromError(e, skipTo);
    }
}

  static final public void empty(String msg) throws ParseException {
saveErrorSintactic(msg);
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_3R_47()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_scan_token(comma)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(rw_switch)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    if (jj_scan_token(id)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(closing_curly_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_scan_token(semicolon)) return true;
    return false;
  }

  static private boolean jj_3_36()
 {
    if (jj_scan_token(bitwise_and)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(comma)) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_scan_token(assignment)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_scan_token(rw_switch)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    if (jj_scan_token(id)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_scan_token(opening_curly_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_27()) return false;
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_scan_token(semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(86)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    if (jj_3R_33()) return true;
    xsp = jj_scanpos;
    if (!jj_3R_34()) return false;
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_scan_token(bitwise_and)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(comma)) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(comma)) return true;
    return false;
  }

  static private boolean jj_3R_67()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(35)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    return false;
  }

  static private boolean jj_3R_63()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(24)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(25)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(26)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(27)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(28)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_scan_token(opening_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_scan_token(closing_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(10)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(9)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(8)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(11)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    return false;
  }

  static private boolean jj_3_34()
 {
    if (jj_scan_token(comma)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(bitwise_and)) return true;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_scan_token(comma)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(9)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(8)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(11)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(10)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_33()) return false;
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_scan_token(opening_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(library_fmt)) return true;
    if (jj_scan_token(dot)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(108)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_scan_token(closing_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(87)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(88)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(89)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(90)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(91)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(92)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(93)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(94)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(95)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(96)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(97)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(98)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(99)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(100)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(101)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(102)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(103)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(104)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_41()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_42()) return false;
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    if (jj_scan_token(opening_round_brackets)) return true;
    if (jj_scan_token(string_literal)) return true;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(closing_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_scan_token(not)) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_62()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_scan_token(not)) return true;
    return false;
  }

  static private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (!jj_3R_62()) return false;
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(38)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(40)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(41)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(42)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(43)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(44)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(45)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(46)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(47)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(48)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_60()
 {
    if (jj_3R_66()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) jj_scanpos = xsp;
    if (jj_scan_token(opening_curly_brackets)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(closing_curly_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_scan_token(opening_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_scan_token(invalid_string)) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_scan_token(semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(rw_if)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_scan_token(opening_curly_brackets)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_65()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_8()) return false;
    jj_scanpos = xsp;
    if (!jj_3_9()) return false;
    jj_scanpos = xsp;
    if (!jj_3_10()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_65()) return false;
    jj_scanpos = xsp;
    if (!jj_3_11()) return false;
    jj_scanpos = xsp;
    if (!jj_3_12()) return false;
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_scan_token(rw_else)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_30()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(83)) return false;
    jj_scanpos = xsp;
    if (!jj_3R_29()) return false;
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_scan_token(opening_curly_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3_29()) return false;
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(invalid_string)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(rw_import)) return true;
    if (jj_scan_token(opening_round_brackets)) return true;
    if (jj_scan_token(string_literal)) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_3R_55()) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(rw_import)) return true;
    if (jj_scan_token(opening_round_brackets)) return true;
    if (jj_scan_token(closing_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(17)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(18)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(19)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(rw_import)) return true;
    if (jj_scan_token(string_literal)) return true;
    if (jj_scan_token(closing_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3R_57()
 {
    if (jj_scan_token(opening_round_brackets)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_56()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_56()) return false;
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(84)) return false;
    jj_scanpos = xsp;
    if (!jj_3R_18()) return false;
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    if (jj_scan_token(string_literal)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(rw_import)) return true;
    if (jj_scan_token(opening_round_brackets)) return true;
    Token xsp;
    if (jj_scan_token(11)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(11)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(closing_round_brackets)) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(comma)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_scan_token(semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_scan_token(invalid_string)) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    if (jj_scan_token(invalid_string)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(id)) return true;
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_37()) return false;
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(assignment)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_scan_token(invalid_string)) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_scan_token(invalid_string)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(rw_package)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_33()) return true;
    if (jj_scan_token(dynamic_assignment)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_59()
 {
    if (jj_scan_token(rw_case)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(75)) return false;
    jj_scanpos = xsp;
    if (!jj_3R_10()) return false;
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    xsp = jj_scanpos;
    if (!jj_scan_token(106)) return false;
    jj_scanpos = xsp;
    if (!jj_3R_12()) return false;
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[63];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x800,0x800,0x0,0x0,0x800,0xf00,0x0,0x0,0xf00,0x0,0x0,0x0,0x0,0xf00,0xf00,0x1e0000,0x1e0000,0xf00,0x0,0x0,0x0,0x0,0xf00,0x0,0xf00,0x0,0x0,0x0,0x0,0x0,0x0,0xf00,0x3f000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x40000,0x0,0x0,0x40000,0x0,0x40020,0x0,0x0,0x0,0x0,0x40,0x40,0x8000000,0x40000,0x40000,0x0,0x0,0x40000,0x100000,0x80000,0x0,0x20,0x0,0x20,0x0,0x1000000,0x18,0x20,0x20,0x1000000,0x18,0x0,0x0,0x18,0x40000,0x80000,0x0,0x40000,0x80000,0x0,0x40000000,0x1000000,0x80000000,0x40000000,0x1000000,0x8000000,0x0,0x0,0x40000,0x80000,0x40000,0x80000,0x20,0x20,0x18,0x3ff40,0x0,0x0,0x8000000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x800,0x0,0x0,0x100000,0x0,0x100000,0x0,0x100000,0x48b000,0x1000,0xff800000,0x0,0x402000,0x0,0xff800000,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0xc000,0xc400,0x400,0xc000,0x0,0xc000,0x0,0x0,0xc800,0x0,0x3ff,0x4000,0x0,0x0,0x3ff,0x0,0xc000,0x4000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0xc000,0x0,0xc000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0xc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0xc800,0x0,0xc800,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[37];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Go(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Go(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 63; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 63; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Go(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 63; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 63; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Go(GoTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 63; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 63; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[117];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 63; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 117; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 37; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}

class CustomError {

    private String errorsLexicon;
    private String errorsSintactic;

    public CustomError() {
        errorsLexicon = "";
        errorsSintactic = "";
    }

    public void saveErrorSintactic(Token token, String msg) {
        errorsSintactic += "ERROR SINT\u00c1CTICO AL DECLARAR " + msg.toUpperCase() + " => EN LA L\u00cdNEA: " + token.beginLine + "\n";
    }

    public void saveErrorLexicon(Token token, String msg) {
        errorsLexicon += "ERROR L\u00c9XICO AL DECLARAR " + msg.toUpperCase() + " => EN LA L\u00cdNEA: " + token.beginLine + "\n";
    }

    public String getErrorsSintactic() {
        return errorsSintactic;
    }

    public String getErrorsLexicon() {
        return errorsLexicon;
    }

}
